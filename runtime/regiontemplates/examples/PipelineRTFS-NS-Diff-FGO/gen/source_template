/*
 * $NAME$.cpp
 *
 *  GENERATED CODE
 *  DO NOT CHANGE IT MANUALLY!!!!!
 */

#include "$NAME$.hpp"

#include <string>
#include <sstream>

/**************************************************************************************/
/**************************** PipelineComponent functions *****************************/
/**************************************************************************************/

$NAME$::$NAME$() {
	this->setComponentName("$NAME$");
	$OUTPUT_DR_CREATE$
}

$NAME$::~$NAME$() {}

int $NAME$::run() {

	// Print name and id of the component instance
	std::cout << "Executing component: " << this->getComponentName() << " instance id: " << this->getId() <<std::endl;
	RegionTemplate * inputRt = this->getRegionTemplateInstance("tile");

$PCB_ARGS$

$INPUT_DR_CREATE$
	if(inputRt != NULL){
$INPUT_DECL_DR$
		try{
$INPUT_CAST_DR$
			std::cout << "$NAME$. paramenterId: "<< dr_id <<std::endl;
		}catch(...){
			std::cout <<"ERROR $NAME$ " << std::endl;
		}

		ostringstream conv;
		conv << dr_id;
		std::string dr_id_s(conv.str());
		char* dr_id_c = new char[dr_id_s.length()];
		for (int i=0; i<dr_id_s.length(); i++)
			dr_id_c[i] = dr_id_s[i];
					
		// Create output data region
		$OUTPUT_DR_ASSIGN$

		std::cout <<  "nDataRegions: after:" << inputRt->getNumDataRegions() << std::endl;

		// Create processing task
		Task$NAME$ * task = new Task$NAME$($PCB_TASK_PARAMS$);

		this->executeTask(task);


	}else{
		std::cout << __FILE__ << ":" << __LINE__ <<" RT == NULL" << std::endl;
	}

	return 0;
}

// Create the component factory
PipelineComponentBase* componentFactory$NAME$() {
	return new $NAME$();
}

// register factory with the runtime system
bool registered$NAME$ = PipelineComponentBase::ComponentFactory::componentRegister("$NAME$", &componentFactory$NAME$);


/**************************************************************************************/
/*********************************** Task functions ***********************************/
/**************************************************************************************/

Task$NAME$::Task$NAME$($TASK_PARAMS$) {
	
$TASK_ARGS$
	
}

Task$NAME$::~Task$NAME$() {
$INPUT_DR_DELETE$
}

bool Task$NAME$::run(int procType, int tid) {
	
$INPUT_MAT_DR$

$OUTPUT_MAT_DR$

	uint64_t t1 = Util::ClockGetTimeProfile();

	std::cout << "Task$NAME$ executing." << std::endl;	

	$CMD$;
	
$OUTPUT_DR_RETURN$

	uint64_t t2 = Util::ClockGetTimeProfile();

	std::cout << "Task $NAME$ time elapsed: "<< t2-t1 << std::endl;
}
