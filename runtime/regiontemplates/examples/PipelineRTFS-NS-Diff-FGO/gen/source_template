/*
 * $NAME$.cpp
 *
 *  GENERATED CODE
 *  DO NOT CHANGE IT MANUALLY!!!!!
 */

#include "$NAME$.hpp"

#include <string>
#include <sstream>

/**************************************************************************************/
/**************************** PipelineComponent functions *****************************/
/**************************************************************************************/

$NAME$::$NAME$() {
	this->setComponentName("$NAME$");
}

$NAME$::~$NAME$() {}

int $NAME$::run() {

	// Print name and id of the component instance
	std::cout << "Executing component: " << this->getComponentName() << " instance id: " << this->getId() <<std::endl;
	RegionTemplate * inputRt = this->getRegionTemplateInstance("tile");

$PCB_ARGS$

$INPUT_DR_CREATE$
$OUTPUT_DR_CREATE$

	if(inputRt != NULL){
$INPUT_DECL_DR$
$OUTPUT_DECL_DR$
		try{
$INPUT_CAST_DR$
$OUTPUT_CAST_DR$
			std::cout << "$NAME$. paramenterId: "<< workflow_id <<std::endl;
		}catch(...){
			std::cout <<"ERROR $NAME$ " << std::endl;
		}

		// Create processing task
$EXEC_TASK$
	}else{
		std::cout << __FILE__ << ":" << __LINE__ <<" RT == NULL" << std::endl;
	}

	return 0;
}

// Create the component factory
PipelineComponentBase* componentFactory$NAME$() {
	return new $NAME$();
}

// register factory with the runtime system
bool registered$NAME$ = PipelineComponentBase::ComponentFactory::componentRegister("$NAME$", &componentFactory$NAME$);


/**************************************************************************************/
/*********************************** Task functions ***********************************/
/**************************************************************************************/

$TASKS$